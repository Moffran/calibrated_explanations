name: test
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  test:
    runs-on: ubuntu-latest
    # Skip CI if commit message starts with 'info:'
    if: ${{!startsWith(github.event.head_commit.message, 'info:') && !startsWith(github.event.head_commit.message, 'Info:') && !startsWith(github.event.head_commit.message, 'docs:') && !startsWith(github.event.head_commit.message, 'Docs:')}}
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip' # caching pip dependencies

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install .
          pip install pytest pytest-cov xgboost lime shap setuptools psutil

      - name: Run tests with coverage
        id: run_tests
        run: pytest --cov=src/calibrated_explanations

      - name: Run doctests
        run: python src/calibrated_explanations/utils/helper.py

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5.5.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  core-only:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install core dependencies only (no viz extras)
        run: |
          python -m pip install --upgrade pip
          # Install project without dependencies to control deps explicitly
          pip install . --no-deps
          # Install minimal runtime deps explicitly (exclude matplotlib/ipython/lime)
          pip install numpy pandas scikit-learn "crepes>=0.7.1,<0.9" "venn-abers>=1.4.1" pytest

      - name: Run core test subset (skip viz)
        run: pytest -q -k "not viz"

  perf-guard:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install . psutil

      - name: Run micro benchmark
        run: |
          python scripts/micro_bench_perf.py > micro_current.json

      - name: Compare micro metrics with baseline thresholds
        run: |
          BASELINE=$(ls benchmarks/micro_*.json | sort | tail -n 1)
          echo "Using baseline: $BASELINE"
          python scripts/check_perf_micro.py "$BASELINE" micro_current.json benchmarks/perf_thresholds.json
