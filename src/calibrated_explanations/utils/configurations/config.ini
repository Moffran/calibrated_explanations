; Configuration File Explanation:

; This configuration file (config.ini) is used to store variables and settings
; for our application. By storing configuration options in a separate file,
; we can easily modify settings without needing to edit the code. Additionally,
; it provides a centralized location for all configuration parameters,
; making it easier to manage and maintain our application.

#############################################################################################################
# Organize all your hard-coded variables below 

; Database Configuration:
[perturbation_variables]
LOW = 0.1
HIGH = 1.0
STEP = 0.05

[figure_size_variables]
WIDTH = 10
HEIGHT = 6

##############################################################################################################
# Sample code demonstrating how to read variables from a config.ini file

# Import the configparser module
#import configparser

# Create a ConfigParser object
#config = configparser.ConfigParser()

# Read the config.ini file
#config.read('config.ini')

# Get variables from the database section
# Database configuration
#db_host = config.get('database', 'host')
#db_port = config.get('database', 'port')
#db_username = config.get('database', 'username')
#db_password = config.get('database', 'password')
#db_name = config.get('database', 'database_name')

# Get variables from the logging section
# Logging configuration
#log_level = config.get('logging', 'log_level')
#log_file = config.get('logging', 'log_file')

# Get variables from the API section
# API configuration
#api_key = config.get('api', 'api_key')
#base_url = config.get('api', 'base_url')

# Now you can use these variables in your code as needed
# Example usage
# print("Database Host:", db_host)
# print("Log Level:", log_level)
# print("API Key:", api_key)
